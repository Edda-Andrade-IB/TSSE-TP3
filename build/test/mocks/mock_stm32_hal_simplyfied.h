/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_STM32_HAL_SIMPLYFIED_H
#define _MOCK_STM32_HAL_SIMPLYFIED_H

#include "unity.h"
#include "stm32_hal_simplyfied.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_stm32_hal_simplyfied_Init(void);
void mock_stm32_hal_simplyfied_Destroy(void);
void mock_stm32_hal_simplyfied_Verify(void);




#define HAL_I2C_Init_IgnoreAndReturn(cmock_retval) HAL_I2C_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Init_StopIgnore() HAL_I2C_Init_CMockStopIgnore()
void HAL_I2C_Init_CMockStopIgnore(void);
#define HAL_I2C_Init_ExpectAndReturn(hi2c, cmock_retval) HAL_I2C_Init_CMockExpectAndReturn(__LINE__, hi2c, cmock_retval)
void HAL_I2C_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Init_CALLBACK)(I2C_HandleTypeDef* hi2c, int cmock_num_calls);
void HAL_I2C_Init_AddCallback(CMOCK_HAL_I2C_Init_CALLBACK Callback);
void HAL_I2C_Init_Stub(CMOCK_HAL_I2C_Init_CALLBACK Callback);
#define HAL_I2C_Init_StubWithCallback HAL_I2C_Init_Stub
#define HAL_I2C_DeInit_IgnoreAndReturn(cmock_retval) HAL_I2C_DeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_DeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_DeInit_StopIgnore() HAL_I2C_DeInit_CMockStopIgnore()
void HAL_I2C_DeInit_CMockStopIgnore(void);
#define HAL_I2C_DeInit_ExpectAndReturn(hi2c, cmock_retval) HAL_I2C_DeInit_CMockExpectAndReturn(__LINE__, hi2c, cmock_retval)
void HAL_I2C_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_DeInit_CALLBACK)(I2C_HandleTypeDef* hi2c, int cmock_num_calls);
void HAL_I2C_DeInit_AddCallback(CMOCK_HAL_I2C_DeInit_CALLBACK Callback);
void HAL_I2C_DeInit_Stub(CMOCK_HAL_I2C_DeInit_CALLBACK Callback);
#define HAL_I2C_DeInit_StubWithCallback HAL_I2C_DeInit_Stub
#define HAL_I2C_Master_Transmit_IgnoreAndReturn(cmock_retval) HAL_I2C_Master_Transmit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Master_Transmit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Master_Transmit_StopIgnore() HAL_I2C_Master_Transmit_CMockStopIgnore()
void HAL_I2C_Master_Transmit_CMockStopIgnore(void);
#define HAL_I2C_Master_Transmit_ExpectAndReturn(hi2c, DevAddress, pData, Size, Timeout, cmock_retval) HAL_I2C_Master_Transmit_CMockExpectAndReturn(__LINE__, hi2c, DevAddress, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Master_Transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Master_Transmit_CALLBACK)(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Master_Transmit_AddCallback(CMOCK_HAL_I2C_Master_Transmit_CALLBACK Callback);
void HAL_I2C_Master_Transmit_Stub(CMOCK_HAL_I2C_Master_Transmit_CALLBACK Callback);
#define HAL_I2C_Master_Transmit_StubWithCallback HAL_I2C_Master_Transmit_Stub
#define HAL_I2C_Master_Receive_IgnoreAndReturn(cmock_retval) HAL_I2C_Master_Receive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Master_Receive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Master_Receive_StopIgnore() HAL_I2C_Master_Receive_CMockStopIgnore()
void HAL_I2C_Master_Receive_CMockStopIgnore(void);
#define HAL_I2C_Master_Receive_ExpectAndReturn(hi2c, DevAddress, pData, Size, Timeout, cmock_retval) HAL_I2C_Master_Receive_CMockExpectAndReturn(__LINE__, hi2c, DevAddress, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Master_Receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Master_Receive_CALLBACK)(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Master_Receive_AddCallback(CMOCK_HAL_I2C_Master_Receive_CALLBACK Callback);
void HAL_I2C_Master_Receive_Stub(CMOCK_HAL_I2C_Master_Receive_CALLBACK Callback);
#define HAL_I2C_Master_Receive_StubWithCallback HAL_I2C_Master_Receive_Stub
#define HAL_I2C_Slave_Transmit_IgnoreAndReturn(cmock_retval) HAL_I2C_Slave_Transmit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Slave_Transmit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Slave_Transmit_StopIgnore() HAL_I2C_Slave_Transmit_CMockStopIgnore()
void HAL_I2C_Slave_Transmit_CMockStopIgnore(void);
#define HAL_I2C_Slave_Transmit_ExpectAndReturn(hi2c, pData, Size, Timeout, cmock_retval) HAL_I2C_Slave_Transmit_CMockExpectAndReturn(__LINE__, hi2c, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Slave_Transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Slave_Transmit_CALLBACK)(I2C_HandleTypeDef* hi2c, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Slave_Transmit_AddCallback(CMOCK_HAL_I2C_Slave_Transmit_CALLBACK Callback);
void HAL_I2C_Slave_Transmit_Stub(CMOCK_HAL_I2C_Slave_Transmit_CALLBACK Callback);
#define HAL_I2C_Slave_Transmit_StubWithCallback HAL_I2C_Slave_Transmit_Stub
#define HAL_I2C_Slave_Receive_IgnoreAndReturn(cmock_retval) HAL_I2C_Slave_Receive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Slave_Receive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Slave_Receive_StopIgnore() HAL_I2C_Slave_Receive_CMockStopIgnore()
void HAL_I2C_Slave_Receive_CMockStopIgnore(void);
#define HAL_I2C_Slave_Receive_ExpectAndReturn(hi2c, pData, Size, Timeout, cmock_retval) HAL_I2C_Slave_Receive_CMockExpectAndReturn(__LINE__, hi2c, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Slave_Receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Slave_Receive_CALLBACK)(I2C_HandleTypeDef* hi2c, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Slave_Receive_AddCallback(CMOCK_HAL_I2C_Slave_Receive_CALLBACK Callback);
void HAL_I2C_Slave_Receive_Stub(CMOCK_HAL_I2C_Slave_Receive_CALLBACK Callback);
#define HAL_I2C_Slave_Receive_StubWithCallback HAL_I2C_Slave_Receive_Stub
#define HAL_I2C_Mem_Write_IgnoreAndReturn(cmock_retval) HAL_I2C_Mem_Write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Mem_Write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Mem_Write_StopIgnore() HAL_I2C_Mem_Write_CMockStopIgnore()
void HAL_I2C_Mem_Write_CMockStopIgnore(void);
#define HAL_I2C_Mem_Write_ExpectAndReturn(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout, cmock_retval) HAL_I2C_Mem_Write_CMockExpectAndReturn(__LINE__, hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Mem_Write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Mem_Write_CALLBACK)(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Mem_Write_AddCallback(CMOCK_HAL_I2C_Mem_Write_CALLBACK Callback);
void HAL_I2C_Mem_Write_Stub(CMOCK_HAL_I2C_Mem_Write_CALLBACK Callback);
#define HAL_I2C_Mem_Write_StubWithCallback HAL_I2C_Mem_Write_Stub
#define HAL_I2C_Mem_Read_IgnoreAndReturn(cmock_retval) HAL_I2C_Mem_Read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_Mem_Read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_Mem_Read_StopIgnore() HAL_I2C_Mem_Read_CMockStopIgnore()
void HAL_I2C_Mem_Read_CMockStopIgnore(void);
#define HAL_I2C_Mem_Read_ExpectAndReturn(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout, cmock_retval) HAL_I2C_Mem_Read_CMockExpectAndReturn(__LINE__, hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout, cmock_retval)
void HAL_I2C_Mem_Read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_Mem_Read_CALLBACK)(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t* pData, uint16_t Size, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_Mem_Read_AddCallback(CMOCK_HAL_I2C_Mem_Read_CALLBACK Callback);
void HAL_I2C_Mem_Read_Stub(CMOCK_HAL_I2C_Mem_Read_CALLBACK Callback);
#define HAL_I2C_Mem_Read_StubWithCallback HAL_I2C_Mem_Read_Stub
#define HAL_I2C_IsDeviceReady_IgnoreAndReturn(cmock_retval) HAL_I2C_IsDeviceReady_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2C_IsDeviceReady_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2C_IsDeviceReady_StopIgnore() HAL_I2C_IsDeviceReady_CMockStopIgnore()
void HAL_I2C_IsDeviceReady_CMockStopIgnore(void);
#define HAL_I2C_IsDeviceReady_ExpectAndReturn(hi2c, DevAddress, Trials, Timeout, cmock_retval) HAL_I2C_IsDeviceReady_CMockExpectAndReturn(__LINE__, hi2c, DevAddress, Trials, Timeout, cmock_retval)
void HAL_I2C_IsDeviceReady_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2C_IsDeviceReady_CALLBACK)(I2C_HandleTypeDef* hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout, int cmock_num_calls);
void HAL_I2C_IsDeviceReady_AddCallback(CMOCK_HAL_I2C_IsDeviceReady_CALLBACK Callback);
void HAL_I2C_IsDeviceReady_Stub(CMOCK_HAL_I2C_IsDeviceReady_CALLBACK Callback);
#define HAL_I2C_IsDeviceReady_StubWithCallback HAL_I2C_IsDeviceReady_Stub
#define HAL_Delay_Ignore() HAL_Delay_CMockIgnore()
void HAL_Delay_CMockIgnore(void);
#define HAL_Delay_StopIgnore() HAL_Delay_CMockStopIgnore()
void HAL_Delay_CMockStopIgnore(void);
#define HAL_Delay_Expect(Delay) HAL_Delay_CMockExpect(__LINE__, Delay)
void HAL_Delay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t Delay);
typedef void (* CMOCK_HAL_Delay_CALLBACK)(uint32_t Delay, int cmock_num_calls);
void HAL_Delay_AddCallback(CMOCK_HAL_Delay_CALLBACK Callback);
void HAL_Delay_Stub(CMOCK_HAL_Delay_CALLBACK Callback);
#define HAL_Delay_StubWithCallback HAL_Delay_Stub
#define HAL_GetTick_IgnoreAndReturn(cmock_retval) HAL_GetTick_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_GetTick_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define HAL_GetTick_StopIgnore() HAL_GetTick_CMockStopIgnore()
void HAL_GetTick_CMockStopIgnore(void);
#define HAL_GetTick_ExpectAndReturn(cmock_retval) HAL_GetTick_CMockExpectAndReturn(__LINE__, cmock_retval)
void HAL_GetTick_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_HAL_GetTick_CALLBACK)(int cmock_num_calls);
void HAL_GetTick_AddCallback(CMOCK_HAL_GetTick_CALLBACK Callback);
void HAL_GetTick_Stub(CMOCK_HAL_GetTick_CALLBACK Callback);
#define HAL_GetTick_StubWithCallback HAL_GetTick_Stub
#define memset_IgnoreAndReturn(cmock_retval) memset_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void memset_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define memset_StopIgnore() memset_CMockStopIgnore()
void memset_CMockStopIgnore(void);
#define memset_ExpectAndReturn(s, c, n, cmock_retval) memset_CMockExpectAndReturn(__LINE__, s, c, n, cmock_retval)
void memset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* s, int c, size_t n, void* cmock_to_return);
typedef void* (* CMOCK_memset_CALLBACK)(void* s, int c, size_t n, int cmock_num_calls);
void memset_AddCallback(CMOCK_memset_CALLBACK Callback);
void memset_Stub(CMOCK_memset_CALLBACK Callback);
#define memset_StubWithCallback memset_Stub
#define assert_IgnoreAndReturn(cmock_retval) assert_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void assert_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define assert_StopIgnore() assert_CMockStopIgnore()
void assert_CMockStopIgnore(void);
#define assert_ExpectAndReturn(cmock_arg1, cmock_retval) assert_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void assert_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_assert_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void assert_AddCallback(CMOCK_assert_CALLBACK Callback);
void assert_Stub(CMOCK_assert_CALLBACK Callback);
#define assert_StubWithCallback assert_Stub
#define HAL_I2CEx_ConfigAnalogFilter_IgnoreAndReturn(cmock_retval) HAL_I2CEx_ConfigAnalogFilter_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2CEx_ConfigAnalogFilter_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2CEx_ConfigAnalogFilter_StopIgnore() HAL_I2CEx_ConfigAnalogFilter_CMockStopIgnore()
void HAL_I2CEx_ConfigAnalogFilter_CMockStopIgnore(void);
#define HAL_I2CEx_ConfigAnalogFilter_ExpectAndReturn(hi2c, AnalogFilter, cmock_retval) HAL_I2CEx_ConfigAnalogFilter_CMockExpectAndReturn(__LINE__, hi2c, AnalogFilter, cmock_retval)
void HAL_I2CEx_ConfigAnalogFilter_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint32_t AnalogFilter, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2CEx_ConfigAnalogFilter_CALLBACK)(I2C_HandleTypeDef* hi2c, uint32_t AnalogFilter, int cmock_num_calls);
void HAL_I2CEx_ConfigAnalogFilter_AddCallback(CMOCK_HAL_I2CEx_ConfigAnalogFilter_CALLBACK Callback);
void HAL_I2CEx_ConfigAnalogFilter_Stub(CMOCK_HAL_I2CEx_ConfigAnalogFilter_CALLBACK Callback);
#define HAL_I2CEx_ConfigAnalogFilter_StubWithCallback HAL_I2CEx_ConfigAnalogFilter_Stub
#define HAL_I2CEx_ConfigDigitalFilter_IgnoreAndReturn(cmock_retval) HAL_I2CEx_ConfigDigitalFilter_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HAL_I2CEx_ConfigDigitalFilter_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, HAL_StatusTypeDef cmock_to_return);
#define HAL_I2CEx_ConfigDigitalFilter_StopIgnore() HAL_I2CEx_ConfigDigitalFilter_CMockStopIgnore()
void HAL_I2CEx_ConfigDigitalFilter_CMockStopIgnore(void);
#define HAL_I2CEx_ConfigDigitalFilter_ExpectAndReturn(hi2c, DigitalFilter, cmock_retval) HAL_I2CEx_ConfigDigitalFilter_CMockExpectAndReturn(__LINE__, hi2c, DigitalFilter, cmock_retval)
void HAL_I2CEx_ConfigDigitalFilter_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, I2C_HandleTypeDef* hi2c, uint32_t DigitalFilter, HAL_StatusTypeDef cmock_to_return);
typedef HAL_StatusTypeDef (* CMOCK_HAL_I2CEx_ConfigDigitalFilter_CALLBACK)(I2C_HandleTypeDef* hi2c, uint32_t DigitalFilter, int cmock_num_calls);
void HAL_I2CEx_ConfigDigitalFilter_AddCallback(CMOCK_HAL_I2CEx_ConfigDigitalFilter_CALLBACK Callback);
void HAL_I2CEx_ConfigDigitalFilter_Stub(CMOCK_HAL_I2CEx_ConfigDigitalFilter_CALLBACK Callback);
#define HAL_I2CEx_ConfigDigitalFilter_StubWithCallback HAL_I2CEx_ConfigDigitalFilter_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
